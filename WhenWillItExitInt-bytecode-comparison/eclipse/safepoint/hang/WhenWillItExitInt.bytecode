Classfile /home/yak/git/safepoint-experiments/WhenWillItExitInt-bytecode-comparison/WhenWillItExitInt.class
  Last modified 23 Jan 2016; size 1717 bytes
  MD5 checksum 41fa6f283e7727f2e24829b4b5607661
  Compiled from "WhenWillItExitInt.java"
public class safepoint.hang.WhenWillItExitInt
  minor version: 0
  major version: 52
  flags: ACC_PUBLIC, ACC_SUPER
Constant pool:
    #1 = Class              #2            // safepoint/hang/WhenWillItExitInt
    #2 = Utf8               safepoint/hang/WhenWillItExitInt
    #3 = Class              #4            // java/lang/Object
    #4 = Utf8               java/lang/Object
    #5 = Utf8               <init>
    #6 = Utf8               ()V
    #7 = Utf8               Code
    #8 = Methodref          #3.#9         // java/lang/Object."<init>":()V
    #9 = NameAndType        #5:#6         // "<init>":()V
   #10 = Utf8               LineNumberTable
   #11 = Utf8               LocalVariableTable
   #12 = Utf8               this
   #13 = Utf8               Lsafepoint/hang/WhenWillItExitInt;
   #14 = Utf8               main
   #15 = Utf8               ([Ljava/lang/String;)V
   #16 = Utf8               Exceptions
   #17 = Class              #18           // java/lang/InterruptedException
   #18 = Utf8               java/lang/InterruptedException
   #19 = Class              #20           // java/lang/Thread
   #20 = Utf8               java/lang/Thread
   #21 = NameAndType        #22:#23       // run:()Ljava/lang/Runnable;
   #22 = Utf8               run
   #23 = Utf8               ()Ljava/lang/Runnable;
   #24 = InvokeDynamic      #0:#21        // #0:run:()Ljava/lang/Runnable;
   #25 = Methodref          #19.#26       // java/lang/Thread."<init>":(Ljava/lang/Runnable;)V
   #26 = NameAndType        #5:#27        // "<init>":(Ljava/lang/Runnable;)V
   #27 = Utf8               (Ljava/lang/Runnable;)V
   #28 = Methodref          #19.#29       // java/lang/Thread.setDaemon:(Z)V
   #29 = NameAndType        #30:#31       // setDaemon:(Z)V
   #30 = Utf8               setDaemon
   #31 = Utf8               (Z)V
   #32 = Methodref          #19.#33       // java/lang/Thread.start:()V
   #33 = NameAndType        #34:#6        // start:()V
   #34 = Utf8               start
   #35 = Long               5000l
   #37 = Methodref          #19.#38       // java/lang/Thread.sleep:(J)V
   #38 = NameAndType        #39:#40       // sleep:(J)V
   #39 = Utf8               sleep
   #40 = Utf8               (J)V
   #41 = Utf8               argc
   #42 = Utf8               [Ljava/lang/String;
   #43 = Utf8               t
   #44 = Utf8               Ljava/lang/Thread;
   #45 = Utf8               lambda$0
   #46 = Integer            2147483647
   #47 = Fieldref           #48.#50       // java/lang/System.out:Ljava/io/PrintStream;
   #48 = Class              #49           // java/lang/System
   #49 = Utf8               java/lang/System
   #50 = NameAndType        #51:#52       // out:Ljava/io/PrintStream;
   #51 = Utf8               out
   #52 = Utf8               Ljava/io/PrintStream;
   #53 = Class              #54           // java/lang/StringBuilder
   #54 = Utf8               java/lang/StringBuilder
   #55 = String             #56           // How Odd:
   #56 = Utf8               How Odd:
   #57 = Methodref          #53.#58       // java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
   #58 = NameAndType        #5:#59        // "<init>":(Ljava/lang/String;)V
   #59 = Utf8               (Ljava/lang/String;)V
   #60 = Methodref          #53.#61       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
   #61 = NameAndType        #62:#63       // append:(J)Ljava/lang/StringBuilder;
   #62 = Utf8               append
   #63 = Utf8               (J)Ljava/lang/StringBuilder;
   #64 = Methodref          #53.#65       // java/lang/StringBuilder.toString:()Ljava/lang/String;
   #65 = NameAndType        #66:#67       // toString:()Ljava/lang/String;
   #66 = Utf8               toString
   #67 = Utf8               ()Ljava/lang/String;
   #68 = Methodref          #69.#71       // java/io/PrintStream.println:(Ljava/lang/String;)V
   #69 = Class              #70           // java/io/PrintStream
   #70 = Utf8               java/io/PrintStream
   #71 = NameAndType        #72:#59       // println:(Ljava/lang/String;)V
   #72 = Utf8               println
   #73 = Utf8               l
   #74 = Utf8               J
   #75 = Utf8               i
   #76 = Utf8               I
   #77 = Utf8               j
   #78 = Utf8               StackMapTable
   #79 = Utf8               SourceFile
   #80 = Utf8               WhenWillItExitInt.java
   #81 = Utf8               BootstrapMethods
   #82 = Methodref          #83.#85       // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;
   #83 = Class              #84           // java/lang/invoke/LambdaMetafactory
   #84 = Utf8               java/lang/invoke/LambdaMetafactory
   #85 = NameAndType        #86:#87       // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;
   #86 = Utf8               metafactory
   #87 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;
   #88 = MethodHandle       #6:#82        // invokestatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;
   #89 = MethodType         #6            //  ()V
   #90 = Methodref          #1.#91        // safepoint/hang/WhenWillItExitInt.lambda$0:()V
   #91 = NameAndType        #45:#6        // lambda$0:()V
   #92 = MethodHandle       #6:#90        // invokestatic safepoint/hang/WhenWillItExitInt.lambda$0:()V
   #93 = MethodType         #6            //  ()V
   #94 = Utf8               InnerClasses
   #95 = Class              #96           // java/lang/invoke/MethodHandles$Lookup
   #96 = Utf8               java/lang/invoke/MethodHandles$Lookup
   #97 = Class              #98           // java/lang/invoke/MethodHandles
   #98 = Utf8               java/lang/invoke/MethodHandles
   #99 = Utf8               Lookup
{
  public safepoint.hang.WhenWillItExitInt();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #8                  // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 2: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lsafepoint/hang/WhenWillItExitInt;

  public static void main(java.lang.String[]) throws java.lang.InterruptedException;
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Exceptions:
      throws java.lang.InterruptedException
    Code:
      stack=3, locals=2, args_size=1
         0: new           #19                 // class java/lang/Thread
         3: dup
         4: invokedynamic #24,  0             // InvokeDynamic #0:run:()Ljava/lang/Runnable;
         9: invokespecial #25                 // Method java/lang/Thread."<init>":(Ljava/lang/Runnable;)V
        12: astore_1
        13: aload_1
        14: iconst_1
        15: invokevirtual #28                 // Method java/lang/Thread.setDaemon:(Z)V
        18: aload_1
        19: invokevirtual #32                 // Method java/lang/Thread.start:()V
        22: ldc2_w        #35                 // long 5000l
        25: invokestatic  #37                 // Method java/lang/Thread.sleep:(J)V
        28: return
      LineNumberTable:
        line 4: 0
        line 14: 13
        line 15: 18
        line 16: 22
        line 17: 28
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      29     0  argc   [Ljava/lang/String;
           13      16     1     t   Ljava/lang/Thread;

  private static void lambda$0();
    descriptor: ()V
    flags: ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=4, locals=4, args_size=0
         0: lconst_0
         1: lstore_0
         2: iconst_0
         3: istore_2
         4: goto          35
         7: iconst_0
         8: istore_3
         9: goto          26
        12: iload_3
        13: iconst_1
        14: iand
        15: iconst_1
        16: if_icmpne     23
        19: lload_0
        20: lconst_1
        21: ladd
        22: lstore_0
        23: iinc          3, 1
        26: iload_3
        27: ldc           #46                 // int 2147483647
        29: if_icmplt     12
        32: iinc          2, 1
        35: iload_2
        36: ldc           #46                 // int 2147483647
        38: if_icmplt     7
        41: getstatic     #47                 // Field java/lang/System.out:Ljava/io/PrintStream;
        44: new           #53                 // class java/lang/StringBuilder
        47: dup
        48: ldc           #55                 // String How Odd:
        50: invokespecial #57                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
        53: lload_0
        54: invokevirtual #60                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
        57: invokevirtual #64                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        60: invokevirtual #68                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        63: return
      LineNumberTable:
        line 5: 0
        line 6: 2
        line 7: 7
        line 8: 12
        line 9: 19
        line 7: 23
        line 6: 32
        line 12: 41
        line 13: 63
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            2      61     0     l   J
            4      37     2     i   I
            9      23     3     j   I
      StackMapTable: number_of_entries = 5
        frame_type = 253 /* append */
          offset_delta = 7
          locals = [ long, int ]
        frame_type = 252 /* append */
          offset_delta = 4
          locals = [ int ]
        frame_type = 10 /* same */
        frame_type = 2 /* same */
        frame_type = 250 /* chop */
          offset_delta = 8
}
SourceFile: "WhenWillItExitInt.java"
BootstrapMethods:
  0: #88 invokestatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #89 ()V
      #92 invokestatic safepoint/hang/WhenWillItExitInt.lambda$0:()V
      #93 ()V
InnerClasses:
     public static final #99= #95 of #97; //Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles
